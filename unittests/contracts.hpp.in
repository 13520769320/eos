/**
 *  @file
 *  @copyright defined in eos/LICENSE.txt
 */
#pragma once

#include <eosio/testing/tester.hpp>

#define CORE_SYM_NAME "${CORE_SYMBOL_NAME}"
#define CORE_SYM_PRECISION 4

#define _STRINGIZE1(x) #x
#define _STRINGIZE2(x) _STRINGIZE1(x)

#define CORE_SYM_STR ( _STRINGIZE2(CORE_SYM_PRECISION) "," CORE_SYM_NAME )
#define CORE_SYM  ( ::eosio::chain::string_to_symbol_c( CORE_SYM_PRECISION, CORE_SYM_NAME ) )

struct core_sym {
   static inline eosio::chain::asset from_string(const std::string& s) {
      return eosio::chain::asset::from_string(s + " " CORE_SYM_NAME);
   }
};

namespace eosio {
   namespace testing {
      struct contracts {
         // Contracts in `eos/unittests/contracts' directory
         static std::vector<uint8_t> deferred_test_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/deferred_test/deferred_test.wasm"); }
         static std::vector<char>    deferred_test_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/deferred_test/deferred_test.abi"); }
   
         static std::vector<uint8_t> eosio_bios_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.bios/eosio.bios.wasm"); }
         static std::vector<char>    eosio_bios_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.bios/eosio.bios.abi"); }

         static std::vector<uint8_t> eosio_msig_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.msig/eosio.msig.wasm"); }
         static std::vector<char>    eosio_msig_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.msig/eosio.msig.abi"); }
   
         static std::vector<uint8_t> eosio_system_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.system/eosio.system.wasm"); }
         static std::vector<char>    eosio_system_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.system/eosio.system.abi"); }

         static std::vector<uint8_t> eosio_token_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.token/eosio.token.wasm"); }
         static std::vector<char>    eosio_token_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.token/eosio.token.abi"); }

         static std::vector<uint8_t> eosio_wrap_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.wrap/eosio.wrap.wasm"); }
         static std::vector<char>    eosio_wrap_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.wrap/eosio.wrap.abi"); }

         // Contracts in `eos/contracts' directory
         static std::vector<uint8_t> asserter_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/asserter/asserter.wasm"); }
         static std::vector<char>    asserter_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/asserter/asserter.abi"); }
   
         static std::vector<uint8_t> hello_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/hello/hello.wasm"); }
         static std::vector<char>    hello_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/hello/hello.abi"); }
   
         static std::vector<uint8_t> infinite_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/infinite/infinite.wasm"); }
         static std::vector<char>    infinite_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/infinite/infinite.abi"); }

         static std::vector<uint8_t> integration_test_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/integration_test/integration_test.wasm"); }
         static std::vector<char>    integration_test_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/integration_test/integration_test.abi"); }

         static std::vector<uint8_t> multi_index_test_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/multi_index_test/multi_index_test.wasm"); }
         static std::vector<char>    multi_index_test_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/multi_index_test/multi_index_test.abi"); }

         static std::vector<uint8_t> noop_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/noop/noop.wasm"); }
         static std::vector<char>    noop_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/noop/noop.abi"); }

         static std::vector<uint8_t> payloadless_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/payloadless/payloadless.wasm"); }
         static std::vector<char>    payloadless_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/payloadless/payloadless.abi"); }

         static std::vector<uint8_t> proxy_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/proxy/proxy.wasm"); }
         static std::vector<char>    proxy_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/proxy/proxy.abi"); }

         static std::vector<uint8_t> simple_token_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/simple.token/simple.token.wasm"); }
         static std::vector<char>    simple_token_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/simple.token/simple.token.abi"); }

         static std::vector<uint8_t> snapshot_test_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/snapshot_test/snapshot_test.wasm"); }
         static std::vector<char>    snapshot_test_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/snapshot_test/snapshot_test.abi"); }

         static std::vector<uint8_t> test_ram_limit_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/test_ram_limit/test_ram_limit.wasm"); }
         static std::vector<char>    test_ram_limit_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/test_ram_limit/test_ram_limit.abi"); }
   
         static std::vector<uint8_t> test_api_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/test_api/test_api.wasm"); }
   
         static std::vector<uint8_t> test_api_db_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/test_api_db/test_api_db.wasm"); }

         static std::vector<uint8_t> test_api_multi_index_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/test_api_multi_index/test_api_multi_index.wasm"); }

         static std::vector<uint8_t> test_api_mem_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/test_api_mem/test_api_mem.wasm"); }
      };
   } /// eosio::testing
}  /// eosio
