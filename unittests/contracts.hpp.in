#pragma once
#include <eosio/testing/tester.hpp>

namespace eosio { namespace testing {

struct contracts {

   // Function for converting wasm `std::vector' uint8_t or char types to `std::string'
   template<typename VectorType>
   static string to_string(std::vector<VectorType> v) {
      return std::string(v.cbegin(), v.cend());
   }
   
   // Contracts in `eos/unittests/contracts' directory
   static std::vector<uint8_t> deferred_test_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/deferred_test/deferred_test.wasm"); }
   static std::vector<char>    deferred_test_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/deferred_test/deferred_test.abi"); }
   
   static std::vector<uint8_t> eosio_bios_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.bios/eosio.bios.wasm"); }
   static std::vector<char>    eosio_bios_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.bios/eosio.bios.abi"); }

   static std::vector<uint8_t> eosio_msig_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.msig/eosio.msig.wasm"); }
   static std::vector<char>    eosio_msig_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.msig/eosio.msig.abi"); }
   
   static std::vector<uint8_t> eosio_system_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.system/eosio.system.wasm"); }
   static std::vector<char>    eosio_system_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.system/eosio.system.abi"); }

   static std::vector<uint8_t> eosio_token_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.token/eosio.token.wasm"); }
   static std::vector<char>    eosio_token_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.token/eosio.token.abi"); }

   static std::vector<uint8_t> eosio_wrap_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.wrap/eosio.wrap.wasm"); }
   static std::vector<char>    eosio_wrap_abi()  { return read_abi("${CMAKE_BINARY_DIR}/unittests/contracts/eosio.wrap/eosio.wrap.abi"); }

   // Contracts in `eos/contracts' directory
   static std::vector<uint8_t> asserter_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/asserter/asserter.wasm"); }
   static std::vector<char>    asserter_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/asserter/asserter.abi"); }
   
   static std::vector<uint8_t> hello_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/hello/hello.wasm"); }
   static std::vector<char>    hello_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/hello/hello.abi"); }
   
   static std::vector<uint8_t> infinite_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/infinite/infinite.wasm"); }
   static std::vector<char>    infinite_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/infinite/infinite.abi"); }

   static std::vector<uint8_t> integration_test_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/integration_test/integration_test.wasm"); }
   static std::vector<char>    integration_test_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/integration_test/integration_test.abi"); }

   static std::vector<uint8_t> multi_index_test_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/multi_index_test/multi_index_test.wasm"); }
   static std::vector<char>    multi_index_test_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/multi_index_test/multi_index_test.abi"); }

   static std::vector<uint8_t> noop_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/noop/noop.wasm"); }
   static std::vector<char>    noop_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/noop/noop.abi"); }

   static std::vector<uint8_t> payloadless_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/payloadless/payloadless.wasm"); }
   static std::vector<char>    payloadless_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/payloadless/payloadless.abi"); }

   static std::vector<uint8_t> proxy_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/proxy/proxy.wasm"); }
   static std::vector<char>    proxy_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/proxy/proxy.abi"); }

   static std::vector<uint8_t> simple_token_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/simple.token/simple.token.wasm"); }
   static std::vector<char>    simple_token_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/simple.token/simple.token.abi"); }

   static std::vector<uint8_t> snapshot_test_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/contracts/snapshot_test/snapshot_test.wasm"); }
   static std::vector<char>    snapshot_test_abi()  { return read_abi("${CMAKE_BINARY_DIR}/contracts/snapshot_test/snapshot_test.abi"); }
};
}} //ns eosio::testing
